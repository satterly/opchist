#!/usr/bin/env perl 
######################
#
# HPOV Message History script
#
######################

# use strict;
use DBI;
use Time::Local;
use Getopt::Long;
use Sys::Hostname;
use File::Basename;
use Time::Local;
use POSIX 'strftime';

# Initialise constants
my $PGM       = basename($0);
my $HOST      = hostname();
my $HOME      = ($ENV{HOME} eq '/' ? '' : $ENV{HOME});
my $CONF_FILE = "$HOME/.$PGM";
my $TWIKI_URL = "http://yourserverhere/twiki/bin/view/HPOM/Opchist";
my $Rcs_Id    = '$Id: //nyse_depot/projects/ems/contrib/utils/opchist#10 $';
my $revision  = $1 if $Rcs_Id =~ /Id: \S+#(\d+) /;

my %DATE_FORMAT = (
    'AM'   => 'MM/DD/YY HH24:MI:SS',
    'US'   => 'MM/DD/YY HH24:MI:SS',
    'USA'  => 'MM/DD/YY HH24:MI:SS',
    'EU'   => 'DD/MM/YY HH24:MI:SS',
    'UK'   => 'DD/MM/YY HH24:MI:SS',
    'GB'   => 'DD/MM/YY HH24:MI:SS',
    'unix' => 'SSSSS',                 # seconds since midnight (not epoch seconds!)
);
my %STRF_FORMAT = (
    'AM'   => '%m/%d/%y %H:%M',
    'US'   => '%m/%d/%y %H:%M',
    'USA'  => '%m/%d/%y %H:%M',
    'EU'   => '%d/%m/%y %H:%M',
    'UK'   => '%d/%m/%y %H:%M',
    'GB'   => '%d/%m/%y %H:%M',
    'unix' => '%s',                    # epoch seconds
);
my %SEVERITY = (
    'critical' => 8,
    'major'    => 32,
    'minor'    => 16,
    'warning'  => 4,
    'normal'   => 2,
    'unknown'  => 1,
    'all'      => 0
);
my %ORDER_BY = (
    'node'        => 'nn.node_name',
    'severity'    => '35',
    'application' => 'm.application',
    'group'       => 'm.message_group',
    'object'      => 'm.object',
    'text'        => 'mt.text_part',
    'type'        => 'm.message_type',
    'service'     => 'm.service_name',
    'dupl'        => 'm.dupl_count',
    'first'       => 'm.receiving_time',
    'last'        => 'm.last_time_received'
);

# Initialise variables
my $with_log_only  = -1;
my $with_unmatched = -1;
my $with_notif     = -1;
my $with_misc      = -1;
my $with_cma       = -1;
my $with_esc       = -1;
my $with_owned     = -1;
my $with_fwded     = -1;
my $with_read_only = -1;
my $with_dupl_min  = -1;
my $with_dupl_max  = -1;
my $with_latency   = 0;
my $with_case      = 1;        # case-sensitive search (default)
my $with_ackn      = 0;
my $max_dupl_anno  = 10;       # number of duplicate annos to display (default)
my $header         = 1;        # show header (default)
my $footer         = 1;        # show footer (default)
my $order_by_dir   = 'DESC';
my $reverse        = 0;
my $all            = 0;
$count = 0;
my $num = 0;
$rc = 0;
my %filters = (
    'L' => '-',                # log_only
    'U' => '-',                # unmatched
    'N' => '-',                # notif
    'M' => '-',                # misc
    'C' => '-',                # cma
    'E' => '-',                # esc
    'O' => '-',                # owned
    'T' => '-',                # fwd to
    'F' => '-',                # fwd from
    'D' => '-',                # duplicate
    'R' => '-',                # read_only
);
my $region = region(time());

# Initialise defaults
my @show       = ('attributes');
my @show_valid = (
    'attributes', 'text',    'original', 'details', 'flags', 'times', 'latency', 'forwards',
    'cma',        'actions', 'anno',     'tickets', 'some',  'all',   'none'
);
my @sort_valid = ('first', 'last', 'node', 'dupl', 'severity', 'application', 'group', 'object', 'text', 'type', 'service');
my @show_some = ('attributes', 'text', 'details', 'tickets');
my @severity  = ('all');

# Read in $HOME/.opchist config file
do("$CONF_FILE") if (-r "$CONF_FILE");

$| = 1;

# Parse command options
usage()
    if !GetOptions(
    \%opts,          'server=s',    'id=s',     'not',              'node=s',        'severity=s',
    'application=s', 'group=s',     'object=s', 'text=s',           'trunc!',        'service|svc=s',
    'source=s',      'type=s',      'key=s',    'log-only!',        'unmatched!',    'notif!',
    'misc!',         'cma!',        'esc!',     'owned!',           'read-only|ro!', 'ackn',
    'latency=i',     'ackd-by=s',   'fwdto!',   'fwdfrom!',         'fromovow',      'ovowserver=s',
    'show=s',        'sort=s',      'reverse',  'minutes|inlast=i', 'hours=i',       'days=i',
    'from=s',        'to=s',        'all',      'count=i',          'dupl=s',        'case!',
    'csv',           'separator=s', 'opcmsg',   'header!',          'footer!',       'region=s',
    'debug',         'help|?',      'version',  'history'
    ) || $opts{'help'};
usage("Unknown arguments: " . join(",", @ARGV)) if @ARGV;

# Initialiase Oracle environment
$ENV{ORACLE_HOME} = get_ora_home();
my $DBMS      = get_dbms();

if ($opts{'version'}) { version(); exit; }
my $debug = $opts{'debug'};
if ($opts{'severity'}) {
    @severity = split(/,/, $opts{'severity'});
    foreach $s (@severity) {
        usage("Unknown '-severity' argument: $s") unless grep /^$s$/, keys %SEVERITY;
    }
}
@severity = 'all' if grep /^all$/, @severity;
@show = split(/,/, $opts{'show'});
if (grep /some/, @show) {
    @show = grep !/some/, @show;
    push @show, @show_some;
}
elsif (grep /none/, @show) {
    usage("Can't use '-show none' with other '-show' options") if grep !/none/, @show;
}
else {
    unshift @show, 'attributes';    # add the default back
    foreach $s (@show) {
        usage("Unknown '-show' argument: $s") unless grep /^$s$/, @show_valid;
    }
}
@show = 'all' if grep /^all$/, @show;
if ($opts{'reverse'}) {
    $reverse      = 1;
    $order_by_dir = 'ASC';
}
if ($opts{'sort'}) {
    @sort = split(/,/, $opts{'sort'});
    foreach $s (@sort) {
        usage("Unknown '-sort' argument: $s") unless grep /^$s$/, @sort_valid;
        push @order_by, "$ORDER_BY{$s} $order_by_dir";
    }
}
if   ($opts{'server'}) { $dbms = $opts{'server'} }
else                   { $dbms = $DBMS }

$from_ovow = $opts{'fromovow'};
$ovowserver = $opts{'ovowserver'} if $opts{'ovowserver'};
print "ovowserver = $ovowserver\n" if $debug;
if ($from_ovow && $ovowserver eq '') {
    usage("Must define OVOW server using '-ovowserver' option or '\$ovowserver' ENV variable in \$HOME/.$PGM config file");
}

$not = 'NOT' if $opts{'not'};
if ($opts{'history'}) {
    $history         = 1;
    $msg_table       = "opc_hist_messages";
    $text_table      = "opc_hist_msg_text";
    $orig_text_table = "opc_hist_orig_text";
    $annotation      = "opc_hist_annotation";
    $anno_text       = "opc_hist_anno_text";
    $cma_table       = "opc_hist_cust_attrib";
}
else {
    $history         = 0;
    $msg_table       = "opc_act_messages";
    $text_table      = "opc_msg_text";
    $orig_text_table = "opc_orig_msg_text";
    $annotation      = "opc_annotation";
    $anno_text       = "opc_anno_text ";
    $cma_table       = "opc_act_cust_attrib";
}
if (defined($opts{'count'}) && $opts{'count'} == 0) {
    usage('Count must be greater than zero');
}
else {
    $count = $opts{'count'};
}
if (defined($opts{'case'}))   { $with_case = $opts{'case'}; }
if (defined($opts{'header'})) { $header    = $opts{'header'}; }
if (defined($opts{'footer'})) { $footer    = $opts{'footer'}; }

if ($opts{'minutes'}) {
    $minutes = $opts{'minutes'};
}
if ($opts{'hours'}) {
    $minutes += $opts{'hours'} * 60;
}
if ($opts{'days'}) {
    $minutes += $opts{'days'} * 1440;
}
$from = 0;
$to = $now = time();

if ($opts{'all'}) {
    $all = 1;
}
elsif ($minutes) {
    $from = $now - $minutes * 60;
}
elsif ($opts{'from'}) {
    usage("Incorrect date format: $DATEFMT") unless $opts{'from'} =~ /(\d+)\/(\d+)\/(\d+) (\d+):(\d+)/;
    $day   = $1;
    $month = $2;
    $year  = $3;
    $hour  = $4;
    $min   = $5;
    if ($DATEFMT =~ /DD\/YY/) {
        $tmp   = $day;
        $day   = $month;
        $month = $tmp;
    }
    $year += 100 if $year < 100;
    $from = timelocal(0, $min, $hour, $day, $month - 1, $year);
}
if ($opts{'to'}) {
    usage("Incorrect date format: $DATEFMT") unless $opts{'to'} =~ /(\d+)\/(\d+)\/(\d+) (\d+):(\d+)/;
    $day   = $1;
    $month = $2;
    $year  = $3;
    $hour  = $4;
    $min   = $5;
    if ($DATEFMT =~ /DD\/YY/) {
        $tmp   = $day;
        $day   = $month;
        $month = $tmp;
    }
    $year += 100 if $year < 100;
    $to = timelocal(0, $min, $hour, $day, $month - 1, $year);
}
unless ($from || $minutes || $all) {
    $from = $to - 2 * 60 * 60;    # default is 2 hours
}
if ($opts{'id'}) {
    $with_msg_id = $opts{'id'};
    $all         = 1;
}
$with_node_name = $opts{'node'};

if (defined($opts{'log_only'}))  { $with_log_only  = $opts{'log_only'};  $filters{'L'} = $with_log_only  ? 'L' : 'l' }
if (defined($opts{'unmatched'})) { $with_unmatched = $opts{'unmatched'}; $filters{'U'} = $with_unmatched ? 'U' : 'u' }
if (defined($opts{'notif'}))     { $with_notif     = $opts{'notif'};     $filters{'N'} = $with_notif     ? 'N' : 'n' }
if (defined($opts{'misc'}))      { $with_misc      = $opts{'misc'};      $filters{'M'} = $with_misc      ? 'M' : 'm' }
if (defined($opts{'cma'}))   { $with_cma   = $opts{'cma'}   ? 2       : 0;     $filters{'C'} = $with_cma    ? 'C' : 'c' }
if (defined($opts{'esc'}))   { $with_esc   = $opts{'esc'}   ? '(1,2)' : '(0)'; $filters{'E'} = $opts{'esc'} ? 'E' : 'e' }
if (defined($opts{'owned'})) { $with_owned = $opts{'owned'} ? 4       : 0;     $filters{'O'} = $with_owned  ? 'O' : 'o' }
if (defined($opts{'fwdto'}))   { $with_fwded = 5; $filters{'T'} = 'T'; }
if (defined($opts{'fwdfrom'})) { $with_fwded = 4; $filters{'F'} = 'F'; }
if (defined($opts{'read_only'})) { $with_read_only = $opts{'read_only'}; $filters{'R'} = $with_read_only ? 'R' : 'r' }
if (defined($opts{'ackn'}))      { $with_ackn      = $opts{'ackn'};      $filters{'A'} = $with_ackn      ? 'A' : 'a' }
usage('Only active messages can be acknowledged') if $with_ackn && $history;

if (defined($opts{'dupl'})) {
    ($with_dupl_min, $with_dupl_max) = split(/,/, $opts{'dupl'});
    $filters{'D'} = 'D';
    if ($with_dupl_max eq '') { $with_dupl_max = -1; $filters{'D'} = 'd' }
}
usage('Duplicate count minimum can not be greater than maximum') if $with_dupl_min > $with_dupl_max && $with_dupl_max >= 0;

$with_application = $opts{'application'};
$with_group       = $opts{'group'};
$with_object      = $opts{'object'};
$with_text        = $opts{'text'};
if (defined($opts{'trunc'})) {
    $trunc_text = $opts{'trunc'};
}
else {
    $trunc_text = 1;
}
$with_service  = $opts{'service'};
$with_source   = $opts{'source'};
$with_type     = $opts{'type'};
$with_key      = $opts{'key'};
$with_severity = join(',', sev2num(@severity)) unless grep /all/, @severity;
$with_latency  = $opts{'latency'};
$with_ackd_by  = $opts{'ackd-by'};

usage('Can only define -csv or -opcmsg output, not both') if $opts{'csv'} && $opts{'opcmsg'};
if ($opts{'csv'}) {
    $csv = 1;
    if ($opts{'separator'}) {
        $separator = $opts{'separator'};
    }
    else {
        $separator = ',';
    }
    @show       = @show_some;
    @show       = ('attributes', 'text', 'cma');
    $trunc_text = 1;
    $header     = 0;
    $footer     = 0;
}

if ($opts{'opcmsg'}) {
    $opcmsg     = 1;
    @show       = @show_some;
    @show       = ('attributes', 'text', 'cma');
    $trunc_text = 1;
    $header     = 0;
    $footer     = 0;
}

if ($opts{'region'}) {
    $region = $opts{'region'};
}
my $DATEFMT = $DATE_FORMAT{$region};
my $STRFFMT = $STRF_FORMAT{$region};

# Connect to the database
print "# Connecting to dbms $dbms\n" if $debug;
$dbh = DBI->connect("dbi:Oracle:$dbms", 'opc_report', 'opc_report', {RaiseError => 0, PrintError => 0, ChopBlanks => 1});
die("Connect $dbms: $DBI::errstr\n") if $DBI::errstr;

if ($from_ovow) {
    $query = qq( 
        SELECT node_name, node_id
          FROM opc_node_names
         WHERE node_id in ( SELECT DISTINCT target_manager_id
                                       FROM opc_forward_msgs ) 
    );

    print "# Running query ... \n$query\n" if $debug;
    $rows = $dbh->selectall_arrayref($query);
    $DBI::errstr && die("Select opc forward msgs: $DBI::errstr\n");
    if ($debug) { warn("No messages in $dbms\n") unless @{$rows}; }
    foreach $row (@{$rows}) {
        ($target_mgr = $row->[0]) =~ s/\..*//;
        $fwd_id{$target_mgr} = $row->[1];
    }
}

$query = ();
$query = "SELECT * FROM (" if $count;
$query .= qq( 
    SELECT m.message_number, 
           m.creation_time, m.receiving_time, 
           m.last_time_received, m.local_ackn_time, 
           to_char(m.local_creation_time, '$DATEFMT'), 
           to_char(m.local_receiving_time, '$DATEFMT'), 
           to_char(m.local_last_time_received, '$DATEFMT'), 
           to_char(m.local_ackn_time, '$DATEFMT'), 
           nn.node_name, m.log_only_flag, m.unmatched_flag,
           m.msg_source_type, m.notification_flag, m.msggrp_misc_flag,
           m.cma_flag, m.severity, m.node_id, m.msg_source_name,
           m.application, m.message_group, m.object, m.ackn_user,
           m.message_type, m.escalate_flag, m.assign_flag, m.service_name,
           m.msg_key, m.forward, m.original_msgid, m.dupl_count,
           mt.text_part, m.msg_gen_node_id, m.notify_services,
           DECODE(m.severity,1,0,2,1,4,2,8,5,16,3,32,4,6),
           m.readonly, m.condition_id, 
           to_char(m.local_unbuffer_time, '$DATEFMT'),
           to_char(m.local_agt_creation_time, '$DATEFMT'), m.time_diff);
$query .= qq(, m.ackn_flag) unless $history;
$query .= qq( 
      FROM $msg_table m, opc_node_names nn, $text_table mt
     WHERE m.node_id = nn.node_id 
       AND m.message_number = mt.message_number 
       AND mt.order_number = 1 
);
$query .= " AND m.message_number = '$with_msg_id'"    if $with_msg_id;
$query .= " AND m.severity IN ($with_severity)"       if $with_severity;
$query .= " AND m.log_only_flag = '$with_log_only'"   if $with_log_only >= 0;
$query .= " AND m.unmatched_flag = '$with_unmatched'" if $with_unmatched >= 0;
$query .= " AND m.notification_flag = '$with_notif'"  if $with_notif >= 0;
$query .= " AND m.msggrp_misc_flag = '$with_misc'"    if $with_misc >= 0;
$query .= " AND m.cma_flag = '$with_cma'"             if $with_cma >= 0;
$query .= " AND m.escalate_flag IN $with_esc"         if $with_esc >= 0;
$query .= " AND m.assign_flag = '$with_owned'"        if $with_owned >= 0;
$query .= " AND m.ackn_flag = '$with_ackn'"           if $with_ackn >= 0 && !$history;
$query .= " AND m.forward = '$with_fwded'"            if $with_fwded > 0;
$query .= " AND m.forward != '$with_fwded'"           if $with_fwded == 0;
$query .= " AND m.readonly = '$with_read_only'"       if $with_read_only >= 0;
$query .= " AND m.dupl_count >= $with_dupl_min"       if $with_dupl_min >= 0;
$query .= " AND m.dupl_count <= $with_dupl_max"       if $with_dupl_max >= 0;
if ($with_case) {
    $query .= " AND nn.node_name $not like '$with_node_name.%'"  if $with_node_name;
    $query .= " AND m.application $not like '$with_application'" if $with_application;
    $query .= " AND m.message_group $not like '$with_group'"     if $with_group;
    $query .= " AND m.object $not like '$with_object'"           if $with_object;
    $query .= " AND m.service_name $not like '$with_service'"    if $with_service;
    $query .= " AND m.msg_source_name $not like '$with_source'"  if $with_source;
    $query .= " AND m.message_type $not like '$with_type'"       if $with_type;
    $query .= " AND m.msg_key $not like '$with_key'"             if $with_key;
    $query .= " AND mt.text_part $not like '%$with_text%'"       if $with_text;
    $query .= " AND m.ackn_user $not like '$with_ackd_by'"       if $with_ackd_by;
}
else {
    $query .= " AND UPPER(nn.node_name) $not like UPPER('$with_node_name.%')"  if $with_node_name;
    $query .= " AND UPPER(m.application) $not like UPPER('$with_application')" if $with_application;
    $query .= " AND UPPER(m.message_group) $not like UPPER('$with_group')"     if $with_group;
    $query .= " AND UPPER(m.object) $not like UPPER('$with_object')"           if $with_object;
    $query .= " AND UPPER(m. service_name) $not like UPPER('$with_service')"   if $with_service;
    $query .= " AND UPPER(m.msg_source_name) $not like UPPER( '$with_source')" if $with_source;
    $query .= " AND UPPER(m.message_type) $not like UPPER('$with_type')"       if $with_type;
    $query .= " AND UPPER(m.msg_key) $not like UPPER('$with_key')"             if $with_key;
    $query .= " AND UPPER(mt.text_part) $not like UPPER('%$with_text%')"       if $with_text;
    $query .= " AND UPPER(m.ackn_user) $not like UPPER('$with_ackd_by')"       if $with_ackd_by;
}
$query .= " AND m.receiving_time - m.creation_time >= $with_latency" if $with_latency;
unless ($all) {
    if (grep /first/, @sort) {
        if ($from) {
            $query .= " AND m.receiving_time >= $from";
            if ($to) { $query .= " AND m.receiving_time <= $to"; }
        }
    }
    else {
        if ($from) {
            $query .= " AND m.last_time_received >= $from";
            if ($to) { $query .= " AND m.last_time_received <= $to"; }
        }
    }
}
$query .= "\n";

# sort message list
if (@sort) {
    $query .= " ORDER BY " . join(',', @order_by);
}
else {
    $query .= " ORDER BY m.last_time_received DESC";
}
$query .= "\n) WHERE rownum <= $count" if $count;
if ($header) {
    print "HP OpenView (HPOM) History Report\n";
    print "           dbms: $dbms\n";
    print "    config file: \$HOME/.$PGM\n" if -r "$HOME/.$PGM";
    print "       messages: " . ($history ? 'history' : 'active') . "\n";
    print "     message id: $with_msg_id\n"    if $with_msg_id;
    print "       nodename: $with_node_name\n" if $with_node_name;
    print "       severity: " . join(',', @severity) . "\n";
    print "    application: $with_application\n"    if $with_application;
    print "  message group: $with_group\n"          if $with_group;
    print "         object: $with_object\n"         if $with_object;
    print "   text pattern: $with_text\n"           if $with_text;
    print "   service name: $with_service\n"        if $with_service;
    print " message source: $with_source\n"         if $with_source;
    print "   message type: $with_type\n"           if $with_type;
    print "    message key: $with_key\n"            if $with_key;
    print "        ackd by: $with_ackd_by\n"        if $with_ackd_by;
    print "     duplicates: "                       if $with_dupl_min >= 0 || $with_dupl_max >= 0;
    print "min. $with_dupl_min"                     if $with_dupl_min >= 0;
    print ", "                                      if $with_dupl_min >= 0 && $with_dupl_max >= 0;
    print "max. $with_dupl_max"                     if $with_dupl_max >= 0;
    print "\n"                                      if $with_dupl_min >= 0 || $with_dupl_max >= 0;
    print "      from OVOW: $ovowserver\n"          if $from_ovow;
    print "      from OVOW: $fwd_id{$ovowserver}\n" if $from_ovow && $debug;
    print "           show: " . join(',', @show) . "\n";
    print "           sort: " . join(',', @sort) . (!@sort ? 'last time received' : '') . ($reverse ? ' (reverse)' : '') . "\n"
        if @sort || $reverse;

    if (grep { $filters{$_} ne '-' } keys %filters) {
        print "        filters: ";
        foreach $f ('L', 'U', 'N', 'M', 'C', 'E', 'O', 'T', 'F', 'D', 'R', 'A') { print "$filters{$f}" }
        print "\n";
    }
    print "       interval: "
        . ($all ? 'all' : strftime($STRFFMT, localtime($from)) . " -- " . strftime($STRFFMT, localtime($to))) . "\n";
    print "       interval: $from -- $to (in epoch seconds)\n" if $debug;
    print "          count: $count\n"                          if $count;
    print "\n";
}

print "# Running query ... \n$query\n\n" if $debug;
$rows = $dbh->selectall_arrayref($query);
$DBI::errstr && die("Select $msg table: $DBI::errstr\n");
if ($debug) { warn("No messages in $dbms\n") unless @{$rows}; }
@rows = (reverse @{$rows});
foreach $row (@rows) {

    $msg_id       = $row->[0];
    $create_time  = $row->[1];
    $receive_time = $row->[2];
    # $last_time_received = $row->[3];
    # $ackn_time = $row->[4];
    $local_create_time        = $row->[5];
    $local_receive_time       = $row->[6];
    $local_last_time_received = $row->[7];
    $local_ackn_time          = $row->[8];
    $local_agt_create_time    = $row->[38];
    $time_diff                = $row->[39];
    ($node = $row->[9]) =~ s/\..*//;
    $severity        = num2sev($row->[16]);
    $node_id         = $row->[17];
    $msg_src_name    = $row->[18];
    $condition_id    = $row->[36];
    $application     = (defined($row->[19]) ? $row->[19] : '');
    $msg_group       = $row->[20];
    $object          = (defined($row->[21]) ? $row->[21] : '');
    $dupl_cnt        = $row->[30];
    $latency         = $receive_time - $create_time;
    $msg_text        = $row->[31];
    $msg_gen_node_id = $row->[32];

    ($notify_svc = $row->[33]) =~ s/\s+//;
    $log_only_flag  = $row->[10];
    $unmatched_flag = $row->[11];
    $notif_flag     = $row->[13];
    $misc_flag      = $row->[14];
    $cma_flag       = $row->[15];
    $esc_flag       = $row->[24];
    $assign_flag    = $row->[25];
    $fwd_flag       = $row->[28];
    $read_only_flag = $row->[35];
    $orig_msg_id    = $row->[29];
    $ackn_flag      = $row->[40];

    $service_name = $row->[26];
    $msg_key      = $row->[27];
    $msg_src_type = src_type($row->[12]);
    $msg_msi_type = msi_type($row->[12]);
    $msg_source   = (defined($msg_msi_type) ? $msg_msi_type . ":" : '') . $msg_src_type . ":" . $msg_src_name;
    $ackn_user    = $row->[22];
    $msg_type     = $row->[23];

    if ($from_ovow) {
        $query = qq(
            SELECT * 
              FROM opc_forward_msgs fm 
             WHERE fm.message number = '$msg id' 
               AND fm.target_manager_id = '$fwd_id{$ovowserver}'
        );
        print "# Running query ... \n$query\n" if $debug;
        $rows = $dbh->selectall_arrayref($query);
        $DBI::errstr && die("Select opc_forward_msgs: $DBI::errstr\n");
        next unless @{$rows};
    }
    if (grep /first/, @sort) {
        $show_time = $local_receive_time;
    }
    else {
        $show_time = $local_last_time_received;
    }
    if ($csv) {
        @cols = ($show_time, $severity, $dupl_cnt, $node, $application, $msg_group, $object);
        print(join("$separator", @cols));
    }
    elsif ($opcmsg) {
        print "opcmsg s=$severity a='$application' msg_g='$msg_group' o='$object' n=$node \\\n";
    }
    else {
        printf("%s|%s|%4s|%15s|%12s|%11s|%12s\n", $show_time, $severity, $dupl_cnt, $node, $application, $msg_group, $object)
            unless (grep /none/, @show);
    }
    if (grep /text|all/, @show) {
        if ($trunc_text) {
            if ($csv) {
                ($msg_text = $msg_text) =~ s/\n\s*//g;
                printf("%s%s", $separator, $msg_text);
            }
            elsif ($opcmsg) {
                print "msg_t='$msg_text'";
            }
            else {
                ($msg_text = $msg_text) =~ s/\n\s*/\n    | /g;
                printf("    |%s\n", $msg_text);
            }
        }
        else {
            $query = qq( 
                SELECT order_number,text_part
                  FROM $text_table 
                 WHERE message_number = '$msg_id' 
              ORDER BY order_number
            );
            print "# Running query ... \n$query\n" if $debug;
            $rows = $dbh->selectall_arrayref($query);
            $DBI::errstr && die("Select $text_table: $DBI::errstr\n");
            if ($debug) { warn("No messages in $dbms\n") unless @{$rows}; }
            foreach $row (@{$rows}) {
                $text_number = $row->[0];
                ($text_part = $row->[1]) =~ s/\n\s*/\n    | /g;
                if ($text_number == 1) {
                    printf("    | %s", $text_part);
                }
                else {
                    printf("%s", $text_part);
                }
            }
            print "\n";
        }
    }
    if (grep /original|all/, @show) {
        $query = qq( 
            SELECT order_number,text_part
              FROM $orig_text_table 
             WHERE message_number = '$msg_id' 
          ORDER BY order_number
        );
        print "# Running query ... \n$query\n" if $debug;
        $rows = $dbh->selectall_arrayref($query);
        $DBI::errstr && die("Select $text_table: $DBI::errstr\n");
        if ($debug) { warn("No messages in $dbms\n") unless @{$rows}; }
        foreach $row (@{$rows}) {
            $text_number = $row->[0];
            ($text_part = $row->[1]) =~ s/\n\s*/\n         | /g;
            if ($text_number == 1) {
                printf("    orig | %s", $text_part);
            }
            else {
                if ($trunc_text) {
                    print "...";
                    last;
                }
                else {
                    printf("%s", $text_part);
                }
            }
        }
        print "\n";
    }

    if (grep /times|all/, @show) {
        printf(
            "    agent time created | %s\n    time created       | %s\n    time received      | %s\n    time last received | %s %s\n",
            $local_agt_create_time, $local_create_time, $local_receive_time, $local_last_time_received);
        if ($assign_flag == 4) {    # owned
            $query = qq( 
                SELECT to_char(local_time,'$DATEFMT')
                  FROM opc_escal_assign_m
                 WHERE message_number = '$msg_id'
            );
            print "# Running query ... \n$query\n " if $debug;
            $rows = $dbh->selectall_arrayref($query);
            $DBI::errstr && die("Select opc_escal_assign_m: $DBI::errstr\n");
            if ($debug) { warn("No messages in $dbms\n") unless @{$rows}; }
            foreach $row (@{$rows}) {
                $local_owned_time = $row->[0];
            }
            print "    time owned         | $local_owned_time\n";
        }
        print "    time acknowledged  | $local_ackn_time\n" if $history;
        print "    time difference    | $time_diff\n";
    }
    printf("    message latency    | %ss\n", $latency) if (grep /latency|all/, @show);
    if (grep /details|all/, @show) {
        $cond_descr = 'unknown condition';
        if ($condition_id ne '000000000000000000000000000000000000') {
            $query = qq(
                SELECT description
                  FROM opc_monitor_cond
                 WHERE condition_id = '$condition_id'
            );
            print "# Running query ... \n$query\n " if $debug;
            $rows = $dbh->selectall_arrayref($query);
            if (!$DBI::errstr) {    # OMU 8.x method
                if ($debug) { warn("No messages in $dbms\n") unless @{$rows}; }
                foreach $row (@{$rows}) {
                    $cond_descr = $row->[0] if $row->[0];
                }
                $query = qq(
                   SELECT description
                     FROM opc_trap_cond
                    WHERE trap_condition_id = '$condition_id'
                );
                print "# Running query ... \n$query\n " if $debug;
                $rows = $dbh->selectall_arrayref($query);
                $DBI::errstr && die("Select opc_trap_cond: $DBI::errstr\n");
                if ($debug) { warn("No messages in $dbms\n") unless @{$rows}; }
                foreach $row (@{$rows}) {
                    $cond_descr = $row->[0] if $row->[0];
                }
            }
            else {    # OMU 9.x method
                $query = qq( 
                    SELECT cma_value
                      FROM $cma_table 
                     WHERE message_number = '$msg_id' 
                       AND cma_name = 'condition_name'
                );
                print "# Running query ... \n$query\n" if $debug;
                $rows = $dbh->selectall_arrayref($query);
                $DBI::errstr && die("Select $cma_table: $DBI::errstr\n");
                if ($debug) { warn("No custom message attributes for message in $dbms\n") unless @{$rows}; }
                foreach $row (@{$rows}) {
                    $cond_descr = $row->[0];
                }
            }
        }
        printf(
            "        message id     | %s\n        orig msg id    | %s\n        node id        | %s (%s)\n        gen node id    | %s (%s)\n        service name   | %s\n        message source | %-14s\n        condition      | %s\n        message type   | %-14s\n        message key    | %s\n",
            ($msg_id      ne '' ? $msg_id      : 'none'),
            ($orig_msg_id ne '' ? $orig_msg_id : 'none'),
            ($node_id     ne '' ? $node_id     : 'unknown'),
            node_name($node_id),
            ($msg_gen_node_id ne '' ? $msg_gen_node_id : 'unknown'),
            node_name($msg_gen_node_id),
            ($service_name ne '' ? $service_name : 'none'),
            ($msg_source   ne '' ? $msg_source   : 'none'),
            $cond_descr,
            ($msg_type ne '' ? $msg_type : 'none'),
            ($msg_key  ne '' ? $msg_key  : 'none')
        );
        print "        ackd by        | $ackn_user\n" if $history;
    }
    if (grep /flags|all/, @show) {
        if ($assign_flag == 4) {
            $owner = 'owned by';
            $query = qq( 
                SELECT op_name
                  FROM opc_escal_assign_m
                 WHERE message_number = '$msg_id'
            );
            print "# Running query ... \n$query\n " if $debug;
            $rows = $dbh->selectall_arrayref($query);
            $DBI::errstr && die("Select opc_forward_msgs: $DBI::errstr\n");
            if ($debug) { warn("No messages in $dbms\n") unless @{$rows}; }
            foreach $row (@{$rows}) {
                $owner .= " $row->[0]";
            }
        }
        else {
            $owner = 'not owned';
        }
        if ($notif_flag == 1) {
            $notify_svc = 'unknown' unless $notify_svc;
        }
        else {
            $notify_svc = 'none';
        }
        printf(
            "            log_only %s | %smatched | notif %s | misc %s | cma %s | esc %s | %s | %s | %s | read_only %s\n",
            ($log_only_flag == 1  ? 'yes' : 'no'),
            ($unmatched_flag == 1 ? 'un'  : ''),
            $notify_svc,
            ($misc_flag == 1 ? 'true' : 'false'),
            ($cma_flag == 2  ? 'yes'  : 'no'),
            ($esc_flag == 1  ? 'yes'  : 'no'),
            $owner,
            fwd($fwd_flag),
            ($read_only_flag == 1 ? 'yes' : 'no')
        );
    }
    if (grep /forwards|all/, @show) {
        $query = qq( 
            SELECT fm.target_manager_id,nn.node_name 
              FROM opc_forward_msgs fm, opc_node_names nn
             WHERE fm.message_number = '$msg_id' 
               AND fm.target_manager_id = nn.node_id 
        );
        print "# Running query ... \n$query\n" if $debug;
        $rows = $dbh->selectall_arrayref($query);
        $DBI::errstr && die("Select opc_forward_msgs: $DBI::errstr\n");
        if ($debug) { warn("No messages in $dbms\n") unless @{$rows}; }
        @fwd_mgrs = ();
        foreach $row (@{$rows}) {
            ($fwd_mgr = $row->[1]) =~ s/\..*//;
            push @fwd_mgrs, $fwd_mgr;
        }
        @fwd_mgrs = 'none' unless @fwd_mgrs;
        printf("            message fwding targets -> %s\n", join(',', sort @fwd_mgrs));
    }
    if (grep /actions|all/, @show) {
        $query = qq( 
            SELECT m.auto_call,m.op_init_call,
                   m.auto_status,m.op_init_status,
                   m.auto_node_id,m.op_init_node_id
              FROM $msg_table m 
             WHERE m.message_number = '$msg_id'
        );
        print "# Running query ... \n$query\n" if $debug;
        $rows = $dbh->selectall_arrayref($query);
        $DBI::errstr && die("Select $msg_table: $DBI::errstr\n");
        if ($debug) { warn("No messages in $dbms\n") unless @{$rows}; }
        foreach $row (@{$rows}) {
            $auto_action     = $row->[0];
            $op_init_action  = $row->[1];
            $auto_status     = action_status($row->[2]);
            $op_init_status  = action_status($row->[3]);
            $auto_node_id    = $row->[4];
            $op_init_node_id = $row->[5];
            $auto_node_id    = $msg_gen_node_id if $auto_node_id eq '';
            $op_init_node_id = $msg_gen_node_id if $op_init_node_id eq '';
            ($auto_node    = node_name($auto_node_id))    =~ s/\..*//;
            ($op_init_node = node_name($op_init_node_id)) =~ s/\..*//;
        }
        if ($auto_status ne 'no action') {
            printf("            auto action | %10s | %15s | %s\n", $auto_status, $auto_node, $auto_action);
        }
        if ($op_init_status ne 'no action') {
            printf("            oper action | %10s | %15s | %s\n", $op_init_status, $op_init_node, $op_init_action);
        }
    }
    if ($cma_flag && grep /cma|all/, @show) {
        $query = qq( 
            SELECT cma_name,cma_value
              FROM $cma_table 
             WHERE message_number = '$msg_id' 
          ORDER BY cma_name
        );
        print "# Running query ... \n$query\n" if $debug;
        $rows = $dbh->selectall_arrayref($query);
        $DBI::errstr && die("Select $cma_table: $DBI::errstr\n");
        if ($debug) { warn("No custom message attributes for message in $dbms\n") unless @{$rows}; }
        foreach $row (@{$rows}) {
            $name  = $row->[0];
            $value = $row->[1];
            if ($csv) {
                printf("%sCMA(%s)=%s", $separator, $name, $value);
            }
            elsif ($opcmsg) {
                printf(" \\\n -option '%s'='%s'", $name, $value);
            }
            else {
                printf("                cma %-14s | %-14s\n", $name, $value);
            }
        }
    }
    if ($notif_flag && grep /tickets|all/, @show) {
        $query = qq( 
            SELECT at.text_part 
              FROM $annotation an,$anno_text at
             WHERE an.message_number = '$msg_id' 
               AND an.anno_text_id = at.anno_text_id 
          ORDER BY anno_number,order_number 
        );
        print "# Running query ... \n$query\n" if $debug;
        $rows = $dbh->selectall_arrayref($query);
        $DBI::errstr && die("Select $annotation,$anno_text: $DBI::errstr\n");
        if ($debug) { warn("No annotations for message in $dbms\n") unless @{$rows}; }
        $ticket = '';
        if (@{$rows}) {

            foreach $row (@{$rows}) {
                next unless $row->[0] =~ /Help Desk ID: (\S+)/;
                $ticket = $1;
            }
            printf("                ticket   | %-14s\n", $ticket) if $ticket;
        }
    }
    if (grep /anno|all/, @show) {
        $query = qq( 
            SELECT anno_number,order_number,text_part,author,
                   to_char(an.local_time,'$DATEFMT')
              FROM $annotation an,$anno_text at 
             WHERE an.message_number = '$msg_id' 
               AND an.anno_text_id = at.anno_text_id 
          ORDER BY anno_number,order_number 
        );
        print "# Running query ... \n$query\n" if $debug;
        $rows = $dbh->selectall_arrayref($query);
        $DBI::errstr && die("Select $annotation,$anno_text: $DBI::errstr\n");
        if ($debug) { warn("No annotations for message in $dbms\n") unless @{$rows}; }
        if (@{$rows}) {
            $prev_anno_num = $dupl_anno_num = 0;
            foreach $row (@{$rows}) {
                $anno_num  = $row->[0];
                $order_num = $row->[1];
                ($annotations = $row->[2]) =~ s/\n\s*/\n                        | /g;
                $author          = $row->[3];
                $local_anno_time = $row->[4];
                if ($anno_num != $prev_anno_num) {
                    print @anno_text unless (grep /Duplicate/, @anno_text) && $dupl_anno_num > $max_dupl_anno;
                    @anno_text = ();
                    push @anno_text,
                        sprintf(
                        "%s                anno %2s | %s %s %s\n",
                        ($anno_num > 1 ? "\n" : ''),
                        $anno_num, $local_anno_time, $author
                        );
                }
                if ($order_num == 1) {
                    push @anno_text, sprintf("                        | %s", $annotations);
                }
                elsif ($order_num == 2) {
                    if ($trunc_text) { push @anno_text, "..."; next; }
                    push @anno_text, sprintf("%s", $annotations);
                }
                else {
                    next if $trunc_text;
                    push @anno_text, sprintf("%s", $annotations);
                }
                $dupl_anno_num++ if $annotations =~ /Duplicate/;
                $prev_anno_num = $anno_num;
            }
            print @anno_text unless (grep /Duplicate/, @anno_text) && $dupl_anno_num > $max_dupl_anno;
            @anno_text = ();
            print "\n";
            printf("%s|\n%sanno ## | did not display %d duplicate annotations (maximum is $max_dupl_anno)\n",
                ' ' x 24, ' ' x 16, $dupl_anno_num - $max_dupl_anno)
                if $dupl_anno_num > $max_dupl_anno;
        }
    }
    $num++;
    print "\n" if $csv || $opcmsg;
    last if $count == $num && $count;
}
$dbh->disconnect();
print "\nTotal Messages: $num (produced on " . strftime("%d/%m/%y at %H:%M", localtime()) . " by $PGM,v$revision on $HOST)\n"
    if $footer;
exit $rc;

##########

sub region {
#-----------
    my $loc = shift;
    my $dst = (localtime($loc))[8];
    my $gmt = timegm(localtime($loc));
    my $off = $dst + ($gmt - $loc) / 3600;
    if   ($off < -2) { return ('AM') }
    else             { return ('EU') }
}

sub get_ora_home {
#-----------------
    my $ora_home;
    my $ovdbconf = '/etc/opt/OV/share/conf/ovdbconf';
    open(DBCONF, "$ovdbconf") || die("Could not find ORACLE_HOME in $ovdbconf: $!\n");
    while (<DBCONF>) {
        next unless /ORACLE_HOME (\S+)/;
        $ora_home = $1;
    }
    close(DBCONF);
    $ora_home || die("Could not find ORACLE_HOME in $ovdbconf\n");
    return ($ora_home);
}

sub get_dbms {
#-------------
    my $dbms;
    my $cmd = '/opt/OV/bin/ovconfget -ovrg server opc DATABASE';
    open(CMD, "$cmd|") || die("$cmd failed: $!\n");
    while (<CMD>) {
        next unless /(\S+)/;
        $dbms = $1;
    }
    close(CMD);
    $dbms || die("ovconfget: Cannot find DATABASE service name\n");
    return ($dbms);
}

sub node_name {
#---------
    my $node_id = shift;
    my $node_name;
    my $query = qq( 
    SELECT nn.node_name 
    FROM opc_node_names nn 
    WHERE nn.node_id = '$node_id'
);
    my $rows = $dbh->selectall_arrayref($query);
    die("Subroutine node_name: $DBI::errstr\n") if $DBI::errstr;
    foreach $row (@{$rows}) {
        $node_name = $row->[0];
    }
    return $node_name;
}

sub num2sev {
#------------
    my $int = shift;
    if ($csv || $opcmsg) {
        if ($int & 1)  { return 'unknown'; }
        if ($int & 2)  { return 'normal'; }
        if ($int & 4)  { return 'warning'; }
        if ($int & 8)  { return 'critical'; }
        if ($int & 16) { return 'minor'; }
        if ($int & 32) { return 'major'; }
    }
    else {
        if ($int & 1)  { return 'Unkn'; }
        if ($int & 2)  { return 'Norm'; }
        if ($int & 4)  { return 'Warn'; }
        if ($int & 8)  { return 'Crit'; }
        if ($int & 16) { return 'Minr'; }
        if ($int & 32) { return 'Majr'; }
    }
    return 'NONE';
}

sub sev2num {
#------------
    my @sev = @_;
    foreach (@sev) {
        push @ret, $SEVERITY{$_};
    }
    return @ret;
}

sub fwd {
#--------
    my $int = shift;
    if ($int == 0) { return 'not fwded'; }
    if ($int == 5) { return 'fwded to this manager'; }
    if ($int == 4) { return 'fwded from this manager'; }
    return 'unknown fwd flag';
}

sub src_type {
#-------------
    my $int = shift;
    my $ret = ();
    if ($int & 1) { $ret .= 'Console'; }
    if ($int & 2) { $ret .= 'Message'; }
    if ($int & 4) { $ret = 'Logfile'; }
    if ($int & 8) { $ret = 'Monitor'; }
    if ($int & 16)   { $ret .= 'SNMPTrap'; }
    if ($int & 256)  { $ret .= 'Schedule'; }
    if ($int & 4096) { $ret .= 'Internal'; }
    return ($ret);
}

sub msi_type {
#-------------
    my $int = shift;
    my $ret = ();
    if ($int & 32) { $ret .= 'Svr-MSI'; }
    if ($int & 64) { $ret .= 'Agt-MSI'; }
    return ($ret);
}

sub action_status {
#------------------
    my $status = shift;
    return 'failed'     if $status == 2;
    return 'started'    if $status == 8;
    return 'successful' if $status == 9;
    return 'available'  if $status == 11;
    return 'no action'  if $status == 12;
    return 'unknown';
}

sub usage {
#----------
    my $msg            = shift;
    my $show_valid     = join(",", @show_valid);
    my $sort_valid     = join(",", @sort_valid);
    my $severity_valid = join(",", keys %SEVERITY);
    print qq(Usage: $PGM 
        [-server <server>] 
        [-minutes <mins>] [-hours <hours>] [-days <days>] [-all] 
        [-from <dd/mm/yy> [hh:mm]] [-to <dd/mm/yy> [hh:mm]] [-count <num>]
        [-id <msg_id>] [-severity $severity_valid] 
        [-node <node>] [-application <app>] [-group <msg_g>] [-object <obj>]
        [-text <text>] [-service <svc_id>] 
        [-source <source>] [-type <msg_type>] [-key <msg_key>] 
        [-nocase] [-notrunc] [-dupl <min>[,<max>]] [-latency <num>] [-ackd-by <user>]
        [-log-only] [-unmatched] [-notif] [-misc] [-cma] [-esc] [-owned] [-read-only]
        [-ackn] [-fwdto] [-fwdfrom] [-fromovow] [-ovowserver <ovowserver>] 
        [-show [$show_valid]]
        [-region <code>] [-csv [-separator <sep>]] [-opcmsg]
        [-noheader] [-nofooter] 
        [-not] [-sort [$sort_valid]] [-reverse]
        [-history] 
        [-debug] [-version] [-help] 

       -server  HPOM database (default: $DBMS)
      -minutes  show messages from last <x> minutes 
        -hours  show messages from last <x> hours 
         -days  show messages from last <x> days 
          -all  show all available messages 
         -from  date-time (default: 2 hours) 
           -to  date-time (default: NOW) 
           -id  message id 
         -node% nodename 
     -severity  $severity_valid (default: all) 
  -application% application name 
        -group% message group 
       -object% message object 
         -text  message text (text is automatically surrounded by % wildcards) 
      -service% service name 
       -source% message source 
         -type% message type 
          -key% message key 
       -nocase  case-insensitive searches for node,application,group,object and text (default: case-sensitive) 
      -notrunc  do not truncate message text or annotations (default: trunc) 
         -dupl  only show messages with number of duplicates >= min, and optionally <= max. 
      -latency  show messages with latency >= min 
      -ackd-by  show messages acknowledged by <user> 
     -log-only! only show log only messages 
    -unmatched! only show unmatched messages 
        -notif! only show messages forwarded to notification service 
         -misc! only show messages in miscellaneous message group 
          -cma! only show messages with cma's 
          -esc! only show messages that were escalated 
        -owned! only show messages that are owned 
    -read-only! only show messages that are read only
         -ackn  only show message acknowledged but not yet moved to history
        -fwdto  only show messages that have been forwarded to another HPOV server 
      -fwdfrom  only show messages that have been forwarded from another HPOV server 
     -fromovow  only show messages that have been forwarded from OVOW server (can be defined in \$HOME/.$PGM file) 
   -ovowserver  nodename of OVOW server (or define '\$ovowserver = <ovowserver>', in config file) 
         -show  $show_valid (default: attributes) 
       -region  override region (default: $region)
          -csv  output in comma separated variable format
    -separator  change the default separator from comma to <sep>
       -opcmsg  output in format that can be run as opcmsgs
     -noheader  turn off header 
     -nofooter  turn off footer 
          -not  negate pattern matching for message text and all fields that support percent wildcards (%)
         -sort  $sort_valid (default: last) 
      -reverse  reverse the sort order (default: descending) 
      -history  run query against history messages 
        -debug  debug mode 
      -version  show version information 
         -help  this help 

             !  option may be negated eg. '-nounmatched' or '-nonotif' 
             %  fields support percent wildcards eg. '-node lon%' or '-obj %SPI%' 

    Files: 
        $CONF_FILE
    TWiki: 
        $TWIKI_URL

);
    version();
    warn "\nERR $msg\n" if $msg;
    exit;
}

sub version {
#----------
    print "$PGM,v$revision\n";
}
